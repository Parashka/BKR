const Customer = require("../models/Customer");
const GiftCard = require("../models/GiftCard");
const nodemailer = require("nodemailer");

const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});
exports.getGiftCards = async (req, res) => {
  try {
    const cards = await GiftCard.find().sort({ createdAt: -1 });
    res.json(cards);
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ä—Ç–æ–∫:", err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏—Ö –∫–∞—Ä—Ç–æ–∫" });
  }
};
exports.createGiftCard = async (req, res) => {
  const { code, title, type, discountPercent } = req.body;

  if (!code || !title || !type) {
    return res.status(400).json({ message: "–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ" });
  }

  if (
    (type === "product-discount" || type === "cart-discount") &&
    (discountPercent === undefined || discountPercent < 0 || discountPercent > 100)
  ) {
    return res.status(400).json({ message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–Ω–∏–∂–∫–∏" });
  }

  try {
    const existing = await GiftCard.findOne({ code });
    if (existing) {
      return res.status(400).json({ message: "–ö–∞—Ä—Ç–∞ –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –≤–∂–µ —ñ—Å–Ω—É—î" });
    }

    const card = new GiftCard({ code, title, type, discountPercent });
    await card.save();

    res.status(201).json({ message: "–ö–∞—Ä—Ç–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ", card });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–∞—Ä—Ç–∫–∏" });
  }
};

exports.deleteGiftCard = async (req, res) => {
  try {
    const { id } = req.params;

    const deleted = await GiftCard.findByIdAndDelete(id);
    if (!deleted) {
      return res.status(404).json({ message: "–ö–∞—Ä—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    res.json({ message: "–ö–∞—Ä—Ç–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–∞—Ä—Ç–∫–∏:", err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–∞—Ä—Ç–∫–∏" });
  }
};


exports.sendGiftCards = async (req, res) => {
  const { giftCardId, sendToAll, sendToAbandoned, customerIds } = req.body;

  try {
    const giftCard = await GiftCard.findById(giftCardId);
    if (!giftCard) return res.status(404).json({ message: "–ö–∞—Ä—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

    let recipients = [];

    if (sendToAll) {
      recipients = await Customer.find({}, "email name");
    } else if (sendToAbandoned) {
      recipients = await Customer.find({ "cart.0": { $exists: true } }, "email name");
    } else if (Array.isArray(customerIds) && customerIds.length > 0) {
      recipients = await Customer.find({ _id: { $in: customerIds } }, "email name");
    } else {
      return res.status(400).json({ message: "–ù–µ –æ–±—Ä–∞–Ω–æ –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤" });
    }

    const results = [];

    for (const user of recipients) {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: user.email,
        subject: `üéÅ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤—É –∫–∞—Ä—Ç–∫—É!`,
        html: `
          <p>–ü—Ä–∏–≤—ñ—Ç, <b>${user.name}</b>!</p>
          <p>–ú–∏ –¥–∞—Ä—É—î–º–æ –≤–∞–º –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤—É –∫–∞—Ä—Ç–∫—É –Ω–∞ <b>${giftCard.amount || giftCard.discountPercent + "% –∑–Ω–∏–∂–∫–∏"}</b>.</p>
          <p><i>${giftCard.title}</i></p>
          <p>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–¥: <b>${giftCard.code || "XXXX-XXXX"}</b></p>
          <p>–î—è–∫—É—î–º–æ, —â–æ –≤–∏ –∑ –Ω–∞–º–∏! üíô</p>
        `,
      };

      const sent = await transporter.sendMail(mailOptions);
      results.push({ email: user.email, status: "ok", id: sent.messageId });
    }

    res.json({ message: `–ù–∞–¥—ñ—Å–ª–∞–Ω–æ ${results.length} –ª–∏—Å—Ç—ñ–≤`, details: results });
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ:", err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏—Ö –∫–∞—Ä—Ç–æ–∫" });
  }
};
